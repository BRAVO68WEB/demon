schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
    """
    measured in seconds
    """
    ttl: Int! = 60

    """
    refresh the cache entry
    """
    refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String

    """
    does the column match the given case-insensitive pattern
    """
    _ilike: String
    _in: [String!]

    """
    does the column match the given POSIX regular expression, case insensitive
    """
    _iregex: String
    _is_null: Boolean

    """
    does the column match the given pattern
    """
    _like: String
    _lt: String
    _lte: String
    _neq: String

    """
    does the column NOT match the given case-insensitive pattern
    """
    _nilike: String
    _nin: [String!]

    """
    does the column NOT match the given POSIX regular expression, case insensitive
    """
    _niregex: String

    """
    does the column NOT match the given pattern
    """
    _nlike: String

    """
    does the column NOT match the given POSIX regular expression, case sensitive
    """
    _nregex: String

    """
    does the column NOT match the given SQL regular expression
    """
    _nsimilar: String

    """
    does the column match the given POSIX regular expression, case sensitive
    """
    _regex: String

    """
    does the column match the given SQL regular expression
    """
    _similar: String
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
    """
    ascending ordering of the cursor
    """
    ASC

    """
    descending ordering of the cursor
    """
    DESC
}

"""
mutation root
"""
type mutation_root {
    """
    delete data from the table: "users"
    """
    delete_users(
        """
        filter the rows which have to be deleted
        """
        where: users_bool_exp!
    ): users_mutation_response

    """
    delete single row from the table: "users"
    """
    delete_users_by_pk(id: uuid!): users

    """
    insert data into the table: "users"
    """
    insert_users(
        """
        the rows to be inserted
        """
        objects: [users_insert_input!]!

        """
        upsert condition
        """
        on_conflict: users_on_conflict
    ): users_mutation_response

    """
    insert a single row into the table: "users"
    """
    insert_users_one(
        """
        the row to be inserted
        """
        object: users_insert_input!

        """
        upsert condition
        """
        on_conflict: users_on_conflict
    ): users

    """
    update data of the table: "users"
    """
    update_users(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: users_set_input

        """
        filter the rows which have to be updated
        """
        where: users_bool_exp!
    ): users_mutation_response

    """
    update single row of the table: "users"
    """
    update_users_by_pk(
        """
        sets the columns of the filtered rows to the given values
        """
        _set: users_set_input
        pk_columns: users_pk_columns_input!
    ): users

    """
    update multiples rows of table: "users"
    """
    update_users_many(
        """
        updates to execute, in order
        """
        updates: [users_updates!]!
    ): [users_mutation_response]
}

"""
column ordering options
"""
enum order_by {
    """
    in ascending order, nulls last
    """
    asc

    """
    in ascending order, nulls first
    """
    asc_nulls_first

    """
    in ascending order, nulls last
    """
    asc_nulls_last

    """
    in descending order, nulls first
    """
    desc

    """
    in descending order, nulls first
    """
    desc_nulls_first

    """
    in descending order, nulls last
    """
    desc_nulls_last
}

type query_root {
    """
    fetch data from the table: "users"
    """
    users(
        """
        distinct select on columns
        """
        distinct_on: [users_select_column!]

        """
        limit the number of rows returned
        """
        limit: Int

        """
        skip the first n rows. Use only with order_by
        """
        offset: Int

        """
        sort the rows by one or more columns
        """
        order_by: [users_order_by!]

        """
        filter the rows returned
        """
        where: users_bool_exp
    ): [users!]!

    """
    fetch aggregated fields from the table: "users"
    """
    users_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [users_select_column!]

        """
        limit the number of rows returned
        """
        limit: Int

        """
        skip the first n rows. Use only with order_by
        """
        offset: Int

        """
        sort the rows by one or more columns
        """
        order_by: [users_order_by!]

        """
        filter the rows returned
        """
        where: users_bool_exp
    ): users_aggregate!

    """
    fetch data from the table: "users" using primary key columns
    """
    users_by_pk(id: uuid!): users
}

type subscription_root {
    """
    fetch data from the table: "users"
    """
    users(
        """
        distinct select on columns
        """
        distinct_on: [users_select_column!]

        """
        limit the number of rows returned
        """
        limit: Int

        """
        skip the first n rows. Use only with order_by
        """
        offset: Int

        """
        sort the rows by one or more columns
        """
        order_by: [users_order_by!]

        """
        filter the rows returned
        """
        where: users_bool_exp
    ): [users!]!

    """
    fetch aggregated fields from the table: "users"
    """
    users_aggregate(
        """
        distinct select on columns
        """
        distinct_on: [users_select_column!]

        """
        limit the number of rows returned
        """
        limit: Int

        """
        skip the first n rows. Use only with order_by
        """
        offset: Int

        """
        sort the rows by one or more columns
        """
        order_by: [users_order_by!]

        """
        filter the rows returned
        """
        where: users_bool_exp
    ): users_aggregate!

    """
    fetch data from the table: "users" using primary key columns
    """
    users_by_pk(id: uuid!): users

    """
    fetch data from the table in a streaming manner: "users"
    """
    users_stream(
        """
        maximum number of rows returned in a single batch
        """
        batch_size: Int!

        """
        cursor to stream the results returned by the query
        """
        cursor: [users_stream_cursor_input]!

        """
        filter the rows returned
        """
        where: users_bool_exp
    ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
    _eq: timestamptz
    _gt: timestamptz
    _gte: timestamptz
    _in: [timestamptz!]
    _is_null: Boolean
    _lt: timestamptz
    _lte: timestamptz
    _neq: timestamptz
    _nin: [timestamptz!]
}

"""
Users Collections
"""
type users {
    created_at: timestamptz!
    email: String!
    first_name: String!
    hash: String!
    id: uuid!
    last_name: String!
    salt: String!
    updated_at: timestamptz!
    username: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int!
    max: users_max_fields
    min: users_min_fields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
    _and: [users_bool_exp!]
    _not: users_bool_exp
    _or: [users_bool_exp!]
    created_at: timestamptz_comparison_exp
    email: String_comparison_exp
    first_name: String_comparison_exp
    hash: String_comparison_exp
    id: uuid_comparison_exp
    last_name: String_comparison_exp
    salt: String_comparison_exp
    updated_at: timestamptz_comparison_exp
    username: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
    """
    unique or primary key constraint on columns "hash"
    """
    users_hash_key

    """
    unique or primary key constraint on columns "id"
    """
    users_pkey

    """
    unique or primary key constraint on columns "salt"
    """
    users_salt_key
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
    created_at: timestamptz
    email: String
    first_name: String
    hash: String
    id: uuid
    last_name: String
    salt: String
    updated_at: timestamptz
    username: String
}

"""
aggregate max on columns
"""
type users_max_fields {
    created_at: timestamptz
    email: String
    first_name: String
    hash: String
    id: uuid
    last_name: String
    salt: String
    updated_at: timestamptz
    username: String
}

"""
aggregate min on columns
"""
type users_min_fields {
    created_at: timestamptz
    email: String
    first_name: String
    hash: String
    id: uuid
    last_name: String
    salt: String
    updated_at: timestamptz
    username: String
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
    """
    number of rows affected by the mutation
    """
    affected_rows: Int!

    """
    data from the rows affected by the mutation
    """
    returning: [users!]!
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]! = []
    where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
    created_at: order_by
    email: order_by
    first_name: order_by
    hash: order_by
    id: order_by
    last_name: order_by
    salt: order_by
    updated_at: order_by
    username: order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
    id: uuid!
}

"""
select columns of table "users"
"""
enum users_select_column {
    """
    column name
    """
    created_at

    """
    column name
    """
    email

    """
    column name
    """
    first_name

    """
    column name
    """
    hash

    """
    column name
    """
    id

    """
    column name
    """
    last_name

    """
    column name
    """
    salt

    """
    column name
    """
    updated_at

    """
    column name
    """
    username
}

"""
input type for updating data in table "users"
"""
input users_set_input {
    created_at: timestamptz
    email: String
    first_name: String
    hash: String
    id: uuid
    last_name: String
    salt: String
    updated_at: timestamptz
    username: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
    """
    Stream column input with initial value
    """
    initial_value: users_stream_cursor_value_input!

    """
    cursor ordering
    """
    ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
    created_at: timestamptz
    email: String
    first_name: String
    hash: String
    id: uuid
    last_name: String
    salt: String
    updated_at: timestamptz
    username: String
}

"""
update columns of table "users"
"""
enum users_update_column {
    """
    column name
    """
    created_at

    """
    column name
    """
    email

    """
    column name
    """
    first_name

    """
    column name
    """
    hash

    """
    column name
    """
    id

    """
    column name
    """
    last_name

    """
    column name
    """
    salt

    """
    column name
    """
    updated_at

    """
    column name
    """
    username
}

input users_updates {
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}
